}
x <- output %>%
detect_index(~ is.null(.)) # position of the first element where a condition is true
x
x <- output %>%
detect_index(~ is.null(.)) # position of the first element where a condition is true
for (i in x:nrow(list_stcnty)){
result1 <-
get_acs(geography = "tract", state = list_stcnty$ST[i], county = list_stcnty$CNTY[i],
variables = varlist, year=2017, output = "wide", cache_table = TRUE) %>%
select(-NAME, -ends_with("M"))
result2 <- result1 %>%
mutate(
pop = B01001_001E,
hu_total = B25024_001E,
hu_sfh = B25024_002E + B25024_003E,
hu_mfh = B25024_004E + B25024_005E + B25024_006E + B25024_007E + B25024_008E + B25024_009E,
pctsfh = ifelse(B25024_001E>0, hu_sfh/B25024_001E*100, 0),
pctmfh = ifelse(B25024_001E>0, hu_mfh/B25024_001E*100, 0),
pctrenter = ifelse(B25003_001E>0, B25003_003E/B25003_001E*100, 0),
pctbuilt_bf50 = ifelse(B25034_001E>0, (B25034_010E + B25034_011E)/B25034_001E*100, 0),
pctbuilt_5069 = ifelse(B25034_001E>0, (B25034_008E + B25034_009E)/B25034_001E*100, 0),
pctbuilt_7089 = ifelse(B25034_001E>0, (B25034_006E + B25034_007E)/B25034_001E*100, 0),
pctbuilt_9009 = ifelse(B25034_001E>0, (B25034_004E + B25034_005E)/B25034_001E*100, 0),
pctbuilt_10af = ifelse(B25034_001E>0, (B25034_002E + B25034_003E)/B25034_001E*100, 0)
) %>%
select(-ends_with("E"))
output[[i]] <- result2
Sys.sleep(runif(n= 1, min=3, max=6))
}
x <- output %>%
detect_index(~ is.null(.)) # position of the first element where a condition is true
x
for (i in x:nrow(list_stcnty)){
result1 <-
get_acs(geography = "tract", state = list_stcnty$ST[i], county = list_stcnty$CNTY[i],
variables = varlist, year=2017, output = "wide", cache_table = TRUE) %>%
select(-NAME, -ends_with("M"))
result2 <- result1 %>%
mutate(
pop = B01001_001E,
hu_total = B25024_001E,
hu_sfh = B25024_002E + B25024_003E,
hu_mfh = B25024_004E + B25024_005E + B25024_006E + B25024_007E + B25024_008E + B25024_009E,
pctsfh = ifelse(B25024_001E>0, hu_sfh/B25024_001E*100, 0),
pctmfh = ifelse(B25024_001E>0, hu_mfh/B25024_001E*100, 0),
pctrenter = ifelse(B25003_001E>0, B25003_003E/B25003_001E*100, 0),
pctbuilt_bf50 = ifelse(B25034_001E>0, (B25034_010E + B25034_011E)/B25034_001E*100, 0),
pctbuilt_5069 = ifelse(B25034_001E>0, (B25034_008E + B25034_009E)/B25034_001E*100, 0),
pctbuilt_7089 = ifelse(B25034_001E>0, (B25034_006E + B25034_007E)/B25034_001E*100, 0),
pctbuilt_9009 = ifelse(B25034_001E>0, (B25034_004E + B25034_005E)/B25034_001E*100, 0),
pctbuilt_10af = ifelse(B25034_001E>0, (B25034_002E + B25034_003E)/B25034_001E*100, 0)
) %>%
select(-ends_with("E"))
output[[i]] <- result2
Sys.sleep(runif(n= 1, min=3, max=6))
}
#------- this is another setup for repeating run. Repeat until the API query ends.
x <- output %>%
detect_index(~ is.null(.)) # position of the first element where a condition is true
x
function_api <- function(x){
tryCatch(
{
result1 <- get_acs(geography = "tract", state = list_stcnty$ST[x], county = list_stcnty$CNTY[x],
variables = varlist, year=2017, output = "wide", cache_table = TRUE) %>%
select(-NAME, -ends_with("M"))
result2 <- result1 %>%
mutate(
pop = B01001_001E,
hu_total = B25024_001E,
hu_sfh = B25024_002E + B25024_003E,
hu_mfh = B25024_004E + B25024_005E + B25024_006E + B25024_007E + B25024_008E + B25024_009E,
pctsfh = ifelse(B25024_001E>0, hu_sfh/B25024_001E*100, 0),
pctmfh = ifelse(B25024_001E>0, hu_mfh/B25024_001E*100, 0),
pctrenter = ifelse(B25003_001E>0, B25003_003E/B25003_001E*100, 0),
pctbuilt_bf50 = ifelse(B25034_001E>0, (B25034_010E + B25034_011E)/B25034_001E*100, 0),
pctbuilt_5069 = ifelse(B25034_001E>0, (B25034_008E + B25034_009E)/B25034_001E*100, 0),
pctbuilt_7089 = ifelse(B25034_001E>0, (B25034_006E + B25034_007E)/B25034_001E*100, 0),
pctbuilt_9009 = ifelse(B25034_001E>0, (B25034_004E + B25034_005E)/B25034_001E*100, 0),
pctbuilt_10af = ifelse(B25034_001E>0, (B25034_002E + B25034_003E)/B25034_001E*100, 0)
) %>%
select(-ends_with("E"))
output[[x]] <- result2
},
error=function(cond) {
message("Here's the original error message:")
message(cond)
output[[x]] <- NA
}
)
}
x
function_api(76)
x <- output %>%
detect_index(~ is.null(.)) # position of the first element where a condition is true
x
output[[75]]
output[[76]]
output[[74]]
function_api(75)
output[[75]]
function_api <- function(x){
tryCatch(
{
result1 <- get_acs(geography = "tract", state = list_stcnty$ST[x], county = list_stcnty$CNTY[x],
variables = varlist, year=2017, output = "wide", cache_table = TRUE) %>%
select(-NAME, -ends_with("M"))
result2 <- result1 %>%
mutate(
pop = B01001_001E,
hu_total = B25024_001E,
hu_sfh = B25024_002E + B25024_003E,
hu_mfh = B25024_004E + B25024_005E + B25024_006E + B25024_007E + B25024_008E + B25024_009E,
pctsfh = ifelse(B25024_001E>0, hu_sfh/B25024_001E*100, 0),
pctmfh = ifelse(B25024_001E>0, hu_mfh/B25024_001E*100, 0),
pctrenter = ifelse(B25003_001E>0, B25003_003E/B25003_001E*100, 0),
pctbuilt_bf50 = ifelse(B25034_001E>0, (B25034_010E + B25034_011E)/B25034_001E*100, 0),
pctbuilt_5069 = ifelse(B25034_001E>0, (B25034_008E + B25034_009E)/B25034_001E*100, 0),
pctbuilt_7089 = ifelse(B25034_001E>0, (B25034_006E + B25034_007E)/B25034_001E*100, 0),
pctbuilt_9009 = ifelse(B25034_001E>0, (B25034_004E + B25034_005E)/B25034_001E*100, 0),
pctbuilt_10af = ifelse(B25034_001E>0, (B25034_002E + B25034_003E)/B25034_001E*100, 0)
) %>%
select(-ends_with("E"))
output[[x]] <<- result2
},
error=function(cond) {
message("Here's the original error message:")
message(cond)
output[[x]] <<- NA
}
)
}
function_api(75)
output[[75]]
x <- output %>%
detect_index(~ is.null(.)) # position of the first element where a condition is true
x
nrow(list_stcnty)
x <- output %>%
detect_index(~ is.null(.)) # position of the first element where a condition is true
output[[x-1]]
output[[x]]
output[[x+1]]
x
output[[x]]
map(76:nrow(list_stcnty), function_api)
if (dir.exists("C:/Users/Yongs/")){
setwd("C:/Users/Yongs/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/RH_VO")
} else {
setwd("C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/RH_VO")
}
if (dir.exists("C:/Users/Yongs/")){
filepath <- "C:/Users/Yongs/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS"
} else {
filepath <- "C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS"
}
getwd()
filepath
if (!require("foreign")) install.packages("foreign", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("plyr")) install.packages("plyr", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("tidyverse")) install.packages("tidyverse", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("sf")) install.packages("sf", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("tigris")) install.packages("tigris", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("tidycensus")) install.packages("tidycensus", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("devtools")) install.packages("devtools")
devtools::install_github("jamgreen/lehdr")
if (!require("psych")) install.packages("psych", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("tableone")) install.packages("tableone", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("MatchIt")) install.packages("MatchIt", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(foreign)
library(plyr)
library(tidyverse)
library(tidycensus)
library(tigris)
options(tigris_use_cache = TRUE)
library(lehdr)
library(psych)
library(tableone)
library(MatchIt)
options(stringsAsFactors = FALSE)
# check the integer max value
#.Machine$integer.max
if (dir.exists("C:/Users/Yongs/")){
setwd("C:/Users/Yongs/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/RH_VO")
} else {
setwd("C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/RH_VO")
}
if (dir.exists("C:/Users/Yongs/")){
filepath <- "C:/Users/Yongs/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS"
} else {
filepath <- "C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS"
}
hh <- read.csv(paste0(filepath, "/03_NHTS/Csv/hhpub.csv"))
## boxplot(HHVEHCNT ~ LIF_CYC, data=hh)
per <- read.csv(paste0(filepath, "/03_NHTS/Csv/perpub.csv"))
hh$NUMCHILD <- ifelse(hh$HHSIZE>=hh$NUMADLT, hh$HHSIZE-hh$NUMADLT, NA)
#per$Under18 <- ifelse(per$R_AGE<18, 1, 0)
#temp1 <- per[, c("HOUSEID", "Under18")]
#temp1$HOUSEID <- as.character(temp1$HOUSEID)
#temp2 <- ddply(temp1, .(HOUSEID), summarize, tot=sum(Under18))
#temp2$HOUSEID <- as.integer(temp2$HOUSEID)
#hh <- merge(hh, temp2, by="HOUSEID")
#colnames(hh)[58] <- "NCHILD"
# the below files are not accessible from my laptop
home <- read.csv('F:/3 Study/0 medium term backup/2017_NHTS_US/GEO/hhctbg.csv') # restricted-use home block group file
work <- read.csv('F:/3 Study/0 medium term backup/2017_NHTS_US/GEO/workct.csv') # restricted-use work/school tract file
bg <- read.dbf(paste0(filepath, "/06_Shapefile/Blkgrp/Blkgrp_50topUA.dbf")) # from a preprocessed shapefile
colnames(bg) <- c("HHSTFIPS","HHCNTYFP","HHCT","HHBG", "GEOID",
"ALAND", "AWATER", "UACE10", "WGS84x","WGS84y")
bgd <- bg[, c("GEOID", "ALAND", "UACE10")]
bgd$GEOID <- as.character(bgd$GEOID)
bgd$HHSTFIPS <- as.integer(substr(bgd$GEOID, 1, 2))
bgd$HHCNTYFP <- as.integer(substr(bgd$GEOID, 3, 5))
bgd$HHCT <- as.integer(substr(bgd$GEOID, 6, 11))
bgd$HHBG <- as.integer(substr(bgd$GEOID, 12, 12))
bgd <- bgd[, c("HHSTFIPS","HHCNTYFP","HHCT","HHBG", "GEOID",
"ALAND", "UACE10")]
bgd$tr <- substr(bgd$GEOID, 1, 11)
trd <- ddply(bgd, "tr", numcolwise(mean))[, c("tr", "UACE10")]
colnames(trd)[1] <- "GEOID"
hhs <- hh[, c("HOUSEID", "TDAYDATE", "HH_RACE",  "HH_HISP", "LIF_CYC", "HHSIZE", "NUMADLT", "NUMCHILD",
"YOUNGCHILD", "WRKCOUNT", "DRVRCNT", "HHFAMINC","HOMEOWN","HHVEHCNT",
"PC", "SPHONE", "TAB", "WEBUSE17", "TAXI", "SCRESP", "WTHHFIN")] #SCRESP = PERSONID
pers <- per[, c("HOUSEID", "PERSONID", "R_RELAT", "R_SEX", "R_AGE", "R_HISP", "R_RACE",
"DRIVER", "EDUC", "DISTTOWK17", "NOCONG", "SCHTYP", "SCHTRN1", "WORKER", "WKFTPT", "WRKTRANS",
"FLEXTIME", "GT1JBLWK", "OCCAT", "WKRMHM", "WKFMHMXX", "MEDCOND",
"NBIKETRP", "BIKE4EX", "NWALKTRP", "WALK4EX", "PTUSED", "RIDESHARE", "DELIVER", "YEARMILE",
"WTPERFIN")]
hhs <- merge(hhs, home, by="HOUSEID")
pers <- merge(pers, work[, c("HOUSEID", "PERSONID", "WKSTFIPS", "WKCNFIPS", "WORKCT")],
by=c("HOUSEID", "PERSONID"))
hhp <- merge(hhs, pers, by=c("HOUSEID"))
hhpbg <- merge(hhp, bgd, by=c("HHSTFIPS","HHCNTYFP","HHCT","HHBG"))
rm("home", "work", "hh", "per", "hhs", "pers", "hhp", "bg")
var.acs <- load_variables(2017, "acs5", cache = TRUE)
var.acs %>%
filter(grepl("^YEAR STRUCTURE BUILT", concept))
varlist <- c("B01001_001",
"B25024_001", "B25024_002", "B25024_003", "B25024_004", "B25024_005",
"B25024_006", "B25024_007", "B25024_008", "B25024_009",
"B25003_001", "B25003_002", "B25003_003",
"B25034_001", "B25034_002", "B25034_003", "B25034_004", "B25034_005",
"B25034_006", "B25034_007", "B25034_008", "B25034_009", "B25034_010",
"B25034_011")
list_stcnty <- trd %>%
as_tibble(.) %>%
mutate(STCNTY = substr(GEOID, 1, 5)) %>%
distinct(STCNTY) %>%
separate(STCNTY, c("ST", "CNTY"), sep=2) %>%
select(ST, CNTY)
x <- output %>%
detect_index(~ is.null(.)) # position of the first element where a condition is true
x
output[[x]]
output[[x-1]]
map_int(output, ~nrow(.))
map_int(output, ~nrow([[.]]))
map_int(output, typeof)
map_chr(output, typeof)
x <- output %>%
detect_index(~ is.logical(.)) # position of the first element where a condition is true
x
map_chr(output, typeof)
output[[x]]
output[[174]]
x <- output %>%
detect_index(~ is.null(.)) # position of the first element where a condition is true
x
x <- output %>%
detect_index(~ is.list(.)) # position of the first element where a condition is true
x
x <- output %>%
detect_index(~ !is.list(.)) # position of the first element where a condition is true
x
output[[174]]
map_chr(output, class)
map(output, class)
map(output, nrow)
map_int(output, nrow)
map_lgl(output, is.list)
map(174:nrow(list_stcnty), function_api) # this updates output for each iteration
map_lgl(output, is.list)
x <- output %>%
detect_index(~ !is.list(.)) # position of the first element where a condition is true
x
output[[x]]
output[[302]]
map_lgl(output, is.list)
map_lgl(output, is.list) == FALSE
sum(map_lgl(output, is.list) == FALSE)
mean(map_lgl(output, is.list) == FALSE)
sum(map_lgl(output, is.list) == FALSE)
map_lgl(output, is.list)
c(1:302)[map_lgl(output, is.list)]
c(1:302)[map_lgl(output, !is.list)]
c(1:302)[map_lgl(output, ~!is.list(.))]
c(1:302)[map_lgl(output, is.list())]
c(1:302)[map_lgl(output, is.list)]
c(1:302)[map_lgl(output, is.list)]
c(1:302)[map_lgl(output, ~!is.list(.))]
c(1:302)[map_lgl(output, ~!is.list(.))] # subsetting a vector 1:302 to extract the positions with NA
positions_ok <-
c(1:302)[map_lgl(output, is.list)]      # subsetting a vector 1:302 to extract the positions with valid results
positions_na <-
c(1:302)[map_lgl(output, ~!is.list(.))] # subsetting a vector 1:302 to extract the positions with NA
map(positions_na, function_api)
positions_ok2 <-
c(1:302)[map_lgl(output, is.list)]      # subsetting a vector 1:302 to extract the positions with valid results
positions_na2 <-
c(1:302)[map_lgl(output, ~!is.list(.))] # subsetting a vector 1:302 to extract the positions with NA
map(positions_na2, function_api)
positions_ok
positions_na
positions_na2
positions_ok3 <-
c(1:302)[map_lgl(output, is.list)]      # subsetting a vector 1:302 to extract the positions with valid results
positions_na3 <-
c(1:302)[map_lgl(output, ~!is.list(.))] # subsetting a vector 1:302 to extract the positions with NA
positions_na3
positions_ok3
map_lgl(output, is.list)
sum(map_lgl(output, is.list))
mean(map_lgl(output, is.list))
nrow(list_stcnty)
beall2 <- bind_rows(output)
beall2
nrow(beall2)
beall2 <- read_rds(paste0(filepath, "/05_Census/beall2.rds"))
nrow(beall2)
beall2 <- bind_rows(output)
nrow(beall2)
temp <- bind_rows(output)
# write_rds(beall2, "C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/05_Census/beall2.rds")
beall2 <- read_rds(paste0(filepath, "/05_Census/beall2.rds"))
identical(temp, beall2)
if (!require("foreign")) install.packages("foreign", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("plyr")) install.packages("plyr", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("tidyverse")) install.packages("tidyverse", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("sf")) install.packages("sf", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("tigris")) install.packages("tigris", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("tidycensus")) install.packages("tidycensus", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("devtools")) install.packages("devtools")
devtools::install_github("jamgreen/lehdr")
if (!require("psych")) install.packages("psych", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("tableone")) install.packages("tableone", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("MatchIt")) install.packages("MatchIt", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(foreign)
library(plyr)
library(tidyverse)
library(tidycensus)
library(tigris)
options(tigris_use_cache = TRUE)
library(lehdr)
library(psych)
library(tableone)
library(MatchIt)
options(stringsAsFactors = FALSE)
# check the integer max value
#.Machine$integer.max
if (dir.exists("C:/Users/Yongs/")){
setwd("C:/Users/Yongs/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/RH_VO")
} else {
setwd("C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/RH_VO")
}
if (dir.exists("C:/Users/Yongs/")){
filepath <- "C:/Users/Yongs/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS"
} else {
filepath <- "C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS"
}
#1. Read input files
hh <- read.csv(paste0(filepath, "/03_NHTS/Csv/hhpub.csv"))
## boxplot(HHVEHCNT ~ LIF_CYC, data=hh)
per <- read.csv(paste0(filepath, "/03_NHTS/Csv/perpub.csv"))
hh$NUMCHILD <- ifelse(hh$HHSIZE>=hh$NUMADLT, hh$HHSIZE-hh$NUMADLT, NA)
bg <- read.dbf(paste0(filepath, "/06_Shapefile/Blkgrp/Blkgrp_50topUA.dbf")) # from a preprocessed shapefile
colnames(bg) <- c("HHSTFIPS","HHCNTYFP","HHCT","HHBG", "GEOID",
"ALAND", "AWATER", "UACE10", "WGS84x","WGS84y")
bgd <- bg[, c("GEOID", "ALAND", "UACE10")]
bgd$GEOID <- as.character(bgd$GEOID)
bgd$HHSTFIPS <- as.integer(substr(bgd$GEOID, 1, 2))
bgd$HHCNTYFP <- as.integer(substr(bgd$GEOID, 3, 5))
bgd$HHCT <- as.integer(substr(bgd$GEOID, 6, 11))
bgd$HHBG <- as.integer(substr(bgd$GEOID, 12, 12))
bgd <- bgd[, c("HHSTFIPS","HHCNTYFP","HHCT","HHBG", "GEOID",
"ALAND", "UACE10")]
bgd$tr <- substr(bgd$GEOID, 1, 11)
trd <- ddply(bgd, "tr", numcolwise(mean))[, c("tr", "UACE10")]
colnames(trd)[1] <- "GEOID"
#write.csv(trd, "C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/11_Scratch/trd.csv")
#2. Merge datasets
hhs <- hh[, c("HOUSEID", "TDAYDATE", "HH_RACE",  "HH_HISP", "LIF_CYC", "HHSIZE", "NUMADLT", "NUMCHILD",
"YOUNGCHILD", "WRKCOUNT", "DRVRCNT", "HHFAMINC","HOMEOWN","HHVEHCNT",
"PC", "SPHONE", "TAB", "WEBUSE17", "TAXI", "SCRESP", "WTHHFIN")] #SCRESP = PERSONID
pers <- per[, c("HOUSEID", "PERSONID", "R_RELAT", "R_SEX", "R_AGE", "R_HISP", "R_RACE",
"DRIVER", "EDUC", "DISTTOWK17", "NOCONG", "SCHTYP", "SCHTRN1", "WORKER", "WKFTPT", "WRKTRANS",
"FLEXTIME", "GT1JBLWK", "OCCAT", "WKRMHM", "WKFMHMXX", "MEDCOND",
"NBIKETRP", "BIKE4EX", "NWALKTRP", "WALK4EX", "PTUSED", "RIDESHARE", "DELIVER", "YEARMILE",
"WTPERFIN")]
hhs <- merge(hhs, home, by="HOUSEID")
pers <- merge(pers, work[, c("HOUSEID", "PERSONID", "WKSTFIPS", "WKCNFIPS", "WORKCT")],
by=c("HOUSEID", "PERSONID"))
hhp <- merge(hhs, pers, by=c("HOUSEID"))
hhpbg <- merge(hhp, bgd, by=c("HHSTFIPS","HHCNTYFP","HHCT","HHBG"))
rm("home", "work", "hh", "per", "hhs", "pers", "hhp", "bg")
var.acs <- load_variables(2017, "acs5", cache = TRUE)
var.acs %>%
filter(grepl("^YEAR STRUCTURE BUILT", concept))
varlist <- c("B01001_001",
"B25024_001", "B25024_002", "B25024_003", "B25024_004", "B25024_005",
"B25024_006", "B25024_007", "B25024_008", "B25024_009",
"B25003_001", "B25003_002", "B25003_003",
"B25034_001", "B25034_002", "B25034_003", "B25034_004", "B25034_005",
"B25034_006", "B25034_007", "B25034_008", "B25034_009", "B25034_010",
"B25034_011")
list_stcnty <- trd %>%
as_tibble(.) %>%
mutate(STCNTY = substr(GEOID, 1, 5)) %>%
distinct(STCNTY) %>%
separate(STCNTY, c("ST", "CNTY"), sep=2) %>%
select(ST, CNTY)
output
# write_rds(beall2, "C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/05_Census/beall2.rds")
beall2 <- read_rds(paste0(filepath, "/05_Census/beall2.rds"))
beall2
tigris_cache_dir(paste9(filepath, "/05_Census/tigris"))
readRenviron('~/.Renviron')
options(tigris_use_cache=TRUE)
tigris_cache_dir(paste0(filepath, "/05_Census/tigris"))
readRenviron('~/.Renviron')
options(tigris_use_cache=TRUE)
output2a
output2a <- vector("list", nrow(list_stcnty))
for(i in seq_along(list_stcnty[[1]])){
temp <- tracts(list_stcnty$ST[i], list_stcnty$CNTY[i], cb = TRUE, year=2017)
output2a[[i]] <- temp@data %>%
select(GEOID, ALAND) %>%
mutate(sqmile = as.double(ALAND)/1000000*0.386102159) %>%
select(-ALAND)
Sys.sleep(runif(1, min=0, max=3))
}
# write_rds(output2b, "C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/05_Census/output2b.rds")
temp <- read_rds("C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/05_Census/output2b.rds")
# write_rds(output2b, "C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/05_Census/output2b.rds")
temp <- read_rds(paste0(filepath, "/05_Census/output2b.rds"))
temp
# write_rds(output2b, "C:/Users/ylee366/Dropbox (GaTech)/3a_ResearchCEE/09_Uber_NHTS/05_Census/output2b.rds")
output2b <- read_rds(paste0(filepath, "/05_Census/output2b.rds"))
if (!require("tidyverse")) install.packages("tidyverse", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("sf")) install.packages("sf", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("tigris")) install.packages("tigris", repos = "http://cran.us.r-project.org", dependencies = TRUE)
if (!require("tidycensus")) install.packages("tidycensus", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(tidyverse)
library(sf)
library(tigris)
library(tidycensus)
options(tigris_use_cache = TRUE)
# census_api_key("YOUR API KEY GOES HERE")
ua50_tracts_list <- read_rds("Mini-project01/ua50_tracts_list.rds")
# a list of state and county fips codes for data extraction: nrow = 241 counties (in 37 states)
# you can create this from ua50_tracts_list
temp <- tibble(
st = rep("00", times = 27245),
cnty = rep("000", times = 27245)
)
temp$st <- substr(ua50_tracts_list$GEOID, 1, 2) # two-digit state FIPS code
temp$cnty <- substr(ua50_tracts_list$GEOID, 3, 5) # three-digit county FIPS code
ua50_stcntyfp_list <- distinct(as_tibble(temp)) # remove duplicates
ua50_tracts_list <- read_rds("C:/Users/ylee366/Dropbox (GaTech)/3e_Class/AdvGIS_Spring2019/Mini-project01/ua50_tracts_list.rds")
library(tidyverse)
library(sf)
library(tigris)
library(tidycensus)
options(tigris_use_cache = TRUE)
# census_api_key("YOUR API KEY GOES HERE")
ua50_tracts_list <- read_rds("C:/Users/ylee366/Dropbox (GaTech)/3e_Class/AdvGIS_Spring2019/Mini-project01/ua50_tracts_list.rds")
temp <- tibble(
st = rep("00", times = 27245),
cnty = rep("000", times = 27245)
)
temp$st <- substr(ua50_tracts_list$GEOID, 1, 2) # two-digit state FIPS code
temp$cnty <- substr(ua50_tracts_list$GEOID, 3, 5) # three-digit county FIPS code
ua50_stcntyfp_list <- distinct(as_tibble(temp)) # remove duplicates
function_api <- function(x){
tryCatch(
{get_acs(state = ua50_stcntyfp_list$st[x],
county = ua50_stcntyfp_list$cnty[x],
geography = "tract",
variables = c("B01001_001", # total population
"B01001_011", "B01001_012", "B01001_035", "B01001_036", # male/female 25-34
"B08301_001", "B08301_010", # transit commuters
"B19013_001", # median household income
"B01001H_001", #white alone, not hispanic/latino
"B15002_001", "B15002_015", "B15002_016", "B15002_017", "B15002_018",
"B15002_032", "B15002_033", "B15002_034", "B15002_035"), # educational attainment for 25 and over
year = 2017, output = "wide", geometry = FALSE)
},
error=function(cond){
message("Here's the original error message:")
message(cond)
return(NA)
}
)
}
ua50_seq <- 1:nrow(ua50_stcntyfp_list)
acs_2010 <- map(ua50_seq, function_api) # this updates output for each iteration
positions_ok <-
ua50_seq[map_lgl(acs_2010, is.list)]      # subsetting a vector 1:13 to extract the positions with valid results
positions_na <-
ua50_seq[map_lgl(acs_2010, ~!is.list(.))] # subsetting a vector 1:13 to extract the positions with NA
map(positions_na, function_api)
acs_2010_df <- dplyr::bind_rows(acs_2010)
